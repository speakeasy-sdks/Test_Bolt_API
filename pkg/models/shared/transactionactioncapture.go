// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransactionActionCaptureTag string

const (
	TransactionActionCaptureTagCapture TransactionActionCaptureTag = "capture"
)

func (e TransactionActionCaptureTag) ToPointer() *TransactionActionCaptureTag {
	return &e
}

func (e *TransactionActionCaptureTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "capture":
		*e = TransactionActionCaptureTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionActionCaptureTag: %v", v)
	}
}

type TransactionActionCapture struct {
	DotTag TransactionActionCaptureTag `json:".tag"`
	// A monetary amount, i.e. a base unit amount and a supported currency.
	Amount Amount `json:"amount"`
}

func (o *TransactionActionCapture) GetDotTag() TransactionActionCaptureTag {
	if o == nil {
		return TransactionActionCaptureTag("")
	}
	return o.DotTag
}

func (o *TransactionActionCapture) GetAmount() Amount {
	if o == nil {
		return Amount{}
	}
	return o.Amount
}
