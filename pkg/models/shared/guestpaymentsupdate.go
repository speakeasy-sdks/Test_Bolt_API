// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SchemasAction string

const (
	SchemasActionRedirect SchemasAction = "redirect"
	SchemasActionFinalize SchemasAction = "finalize"
)

func (e SchemasAction) ToPointer() *SchemasAction {
	return &e
}

func (e *SchemasAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		fallthrough
	case "finalize":
		*e = SchemasAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasAction: %v", v)
	}
}

type Method string

const (
	MethodGet  Method = "GET"
	MethodPost Method = "POST"
)

func (e Method) ToPointer() *Method {
	return &e
}

func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

type SchemasStatus string

const (
	SchemasStatusAwaitingUserConfirmation SchemasStatus = "awaiting_user_confirmation"
	SchemasStatusPaymentReady             SchemasStatus = "payment_ready"
	SchemasStatusUpdatePaymentMethod      SchemasStatus = "update_payment_method"
)

func (e SchemasStatus) ToPointer() *SchemasStatus {
	return &e
}

func (e *SchemasStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "update_payment_method":
		*e = SchemasStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasStatus: %v", v)
	}
}

type PaymentResponsePendingSchemas struct {
	Action *SchemasAction `json:"action,omitempty"`
	ID     *string        `json:"id,omitempty"`
	Method *Method        `json:"method,omitempty"`
	Status *SchemasStatus `json:"status,omitempty"`
	URL    *string        `json:"url,omitempty"`
}

func (o *PaymentResponsePendingSchemas) GetAction() *SchemasAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PaymentResponsePendingSchemas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentResponsePendingSchemas) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentResponsePendingSchemas) GetStatus() *SchemasStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentResponsePendingSchemas) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Status string

const (
	StatusSuccess Status = "success"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PaymentResponseFinalizedSchemas struct {
	ID          *string      `json:"id,omitempty"`
	Status      *Status      `json:"status,omitempty"`
	Transaction *Transaction `json:"transaction,omitempty"`
}

func (o *PaymentResponseFinalizedSchemas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentResponseFinalizedSchemas) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentResponseFinalizedSchemas) GetTransaction() *Transaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}
