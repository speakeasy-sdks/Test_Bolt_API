// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/Test_Bolt_API/pkg/utils"
)

type TransactionActionRequestActionType string

const (
	TransactionActionRequestActionTypeCapture TransactionActionRequestActionType = "capture"
	TransactionActionRequestActionTypeRefund  TransactionActionRequestActionType = "refund"
	TransactionActionRequestActionTypeVoid    TransactionActionRequestActionType = "void"
)

type TransactionActionRequestAction struct {
	TransactionActionCapture *TransactionActionCapture
	TransactionActionRefund  *TransactionActionRefund
	TransactionActionVoid    *TransactionActionVoid

	Type TransactionActionRequestActionType
}

func CreateTransactionActionRequestActionCapture(capture TransactionActionCapture) TransactionActionRequestAction {
	typ := TransactionActionRequestActionTypeCapture
	typStr := TransactionActionCaptureTag(typ)
	capture.DotTag = typStr

	return TransactionActionRequestAction{
		TransactionActionCapture: &capture,
		Type:                     typ,
	}
}

func CreateTransactionActionRequestActionRefund(refund TransactionActionRefund) TransactionActionRequestAction {
	typ := TransactionActionRequestActionTypeRefund
	typStr := TransactionActionRefundTag(typ)
	refund.DotTag = typStr

	return TransactionActionRequestAction{
		TransactionActionRefund: &refund,
		Type:                    typ,
	}
}

func CreateTransactionActionRequestActionVoid(void TransactionActionVoid) TransactionActionRequestAction {
	typ := TransactionActionRequestActionTypeVoid
	typStr := TransactionActionVoidTag(typ)
	void.DotTag = typStr

	return TransactionActionRequestAction{
		TransactionActionVoid: &void,
		Type:                  typ,
	}
}

func (u *TransactionActionRequestAction) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		DotTag string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.DotTag {
	case "capture":
		transactionActionCapture := new(TransactionActionCapture)
		if err := utils.UnmarshalJSON(data, &transactionActionCapture, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TransactionActionCapture = transactionActionCapture
		u.Type = TransactionActionRequestActionTypeCapture
		return nil
	case "refund":
		transactionActionRefund := new(TransactionActionRefund)
		if err := utils.UnmarshalJSON(data, &transactionActionRefund, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TransactionActionRefund = transactionActionRefund
		u.Type = TransactionActionRequestActionTypeRefund
		return nil
	case "void":
		transactionActionVoid := new(TransactionActionVoid)
		if err := utils.UnmarshalJSON(data, &transactionActionVoid, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TransactionActionVoid = transactionActionVoid
		u.Type = TransactionActionRequestActionTypeVoid
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransactionActionRequestAction) MarshalJSON() ([]byte, error) {
	if u.TransactionActionCapture != nil {
		return utils.MarshalJSON(u.TransactionActionCapture, "", true)
	}

	if u.TransactionActionRefund != nil {
		return utils.MarshalJSON(u.TransactionActionRefund, "", true)
	}

	if u.TransactionActionVoid != nil {
		return utils.MarshalJSON(u.TransactionActionVoid, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TransactionActionRequest struct {
	Action TransactionActionRequestAction `json:"action"`
}

func (o *TransactionActionRequest) GetAction() TransactionActionRequestAction {
	if o == nil {
		return TransactionActionRequestAction{}
	}
	return o.Action
}

func (o *TransactionActionRequest) GetActionCapture() *TransactionActionCapture {
	return o.GetAction().TransactionActionCapture
}

func (o *TransactionActionRequest) GetActionRefund() *TransactionActionRefund {
	return o.GetAction().TransactionActionRefund
}

func (o *TransactionActionRequest) GetActionVoid() *TransactionActionVoid {
	return o.GetAction().TransactionActionVoid
}
